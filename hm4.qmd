---
title: "Jacob Adams: HomeWork 4"
format: pdf
editor: visual
---

::: {.callout-important style="font-size: 0.8em;"}
Please read the instructions carefully before submitting your assignment.

1.  This assignment requires you to only upload a `PDF` file on Canvas
2.  Don't collapse any code cells before submitting.
3.  Remember to make sure all your code output is rendered properly before uploading your submission.

⚠️ Please add your name to the author information in the frontmatter before submitting your assignment ⚠️
:::

We will be using the following libraries:

```{R}
packages <- c(
  "dplyr", 
  "readr", 
  "tidyr", 
  "purrr", 
  "stringr", 
  "corrplot", 
  "car", 
  "caret", 
  "torch", 
  "nnet", 
  "broom"
)

#renv::install(packages)
sapply(packages, require, character.only=T)

```

```{R}
library(torch)
library(dplyr)
library(tidyr)
library(purrr)
library(stringr)
library(corrplot)
library(car)
library(caret)
library(nnet)
library(broom)
#torch :: install_torch()
```

## Question 1

::: callout-tip
## 30 points

Automatic differentiation using `torch`
:::

###### 1.1 (5 points)

Consider $g(x, y)$ given by $$
g(x, y) = (x - 3)^2 + (y - 4)^2.
$$

Using elementary calculus derive the expressions for

$$
\frac{d}{dx}g(x, y), \quad \text{and} \quad \frac{d}{dy}g(x, y).
$$ Using elementary calculus to solve: $$
\frac{d}{dx}g(x, y) = 2x-6, \quad \text{and} \quad \frac{d}{dy}g(x, y) = 2y-8.
$$

Using your answer from above, what is the answer to $$
\frac{d}{dx}g(x, y) \Bigg|_{(x=3, y=4)} \quad \text{and} \quad \frac{d}{dy}g(x, y) \Bigg|_{(x=3, y=4)} ?
$$ *Solutions plugging in x = 3, y = 4 for partial derivative with respect to x and y. As we can see, both expressions equal zero.*

$$
\frac{d}{dx}g(x, y) \Bigg|_{(x=3, y=4)} = 0 \quad \text{and} \quad \frac{d}{dy}g(x, y) \Bigg|_{(x=3, y=4)} = 0
$$

Define $g(x, y)$ as a function in R, compute the gradient of $g(x, y)$ with respect to $x=3$ and $y=4$. Does the answer match what you expected?

*Yes the answer matches my answer from above*

```{R}
library(torch)
#torch::install_torch(reinstall=TRUE)
g <- function(x,y){
  return((x-3)^2 +(y-4)^2)
  
}
x <- torch_tensor(3,  requires_grad = TRUE)
y <- torch_tensor(4,  requires_grad = TRUE)
z <- g(x,y)
z$backward()

part_x <- x$grad
part_y <- y$grad

print(part_x$item())
print(part_y$item())

```

###### 1.2 (10 points)

Consider $h(u, v)$ given by $$
h(u, v) = (u \cdot v)^3,
$$

where $\u \cdot \v$ denotes the dot product of two vectors,

i.e., $$\u \cdot \v = \sum_{i=1}^n u_i v_i.$$

Using elementary calculus derive the expressions for the gradients

*The expression of the gradient is below*

3(u dot v)\^2 dot u

Using your answer from above, what is the answer to the gradient of h(u,v) when n=10 and

$$
\begin{aligned}
\u = (-1, +1, -1, +1, -1, +1, -1, +1, -1, +1)\\
\v = (-1, -1, -1, -1, -1, +1, +1, +1, +1, +1)
\end{aligned}
$$

*When n = 10 and vectors u and v have varying values of 1 and -1, the gradient is a vector of length 10 where the first half is -12 and the second half is positive 12.*

Define $h(\u, \v)$ as a function in R, and initialize the two vectors $\u$ and $\v$ as `torch_tensor`s. Compute the gradient of $h(\u, \v)$ with respect to $\u$. Does the answer match what you expected? *Yes*

```{R}
h <- function(u,v){
  dot <- sum( u * v)
  return(dot^3)
}

u <- c(-1, 1, -1, 1, -1, 1, -1, 1, -1, 1)
v <- c(-1,-1,-1,-1,-1,1,1,1,1,1)

u <- torch_tensor(u, requires_grad = TRUE)
v <- torch_tensor(v, requires_grad = TRUE)
z <- h(u,v)


z$backward()
grad_u <- u$grad
print(grad_u)



```

###### 1.3 (5 points)

Consider the following function $$
f(z) = z^4 - 6z^2 - 3z + 4
$$

Derive the expression for $$
f'(z_0) = \frac{df}{dz}\Bigg|_{z=z_0}
$$ and evaluate $f'(z_0)$ when $z_0 = -3.5$.

$$
f'(z_0) = \frac{df}{dz}\Bigg|_{z=z_0} = 4(z_0)^3 - 12z_0 -3
$$

Define $f(z)$ as a function in R, and using the `torch` library compute $f'(-3.5)$.

```{R}

f_z <- function(z_0){
  return_value = (z_0^4) - 6 *(z_0^2) - 3*(z_0) + 4
  return(return_value) 
}

z <- torch_tensor(-3.5, requires_grad = TRUE)
ans <- f_z(z)
ans$backward()
gradient <- z$grad

print(gradient)

```

I could not get this gradient descent function to work.

###### 1.4 (5 points)

For the same function $f$, initialize $z[1] = -3.5$, and perform $n=100$ iterations of **gradient descent**, i.e.,

\$z\[{k+1}\] = z\[k\] - \eta f'(z\[k\])    \$ for $k = 1, 2, \dots, 100$

Plot the curve $f$ and add taking $\eta = 0.02$, add the points $\{z_0, z_1, z_2, \dots z_{100}\}$ obtained using gradient descent to the plot. What do you observe?

```{R}
f_z <- function(z_0){
  return_value = (z_0^4) - 6 *(z_0^2) - 3*(z_0) + 4
  return(return_value) 
}
eta <- 0.02
z <- torch_tensor(-3.5, requires_grad = TRUE)

steps <- 100
gradient_vector <- numeric(100)
# Perform gradient descent
#for (k in 1:steps) {
  #output <- f_z(z)
  
  #output$backward()
  
  #gradient <- z$grad
  #gradient<- gradient$to(device = torch_device("cpu"))
  
  #z <- z[k] - eta * gradient
  #gradient_vector[k] <- z$item()
  #z$zero_grad()
#}
```

```{R}
df_grad <- data.frame(z = gradient_vector, k = 1:steps)
ggplot(df_grad, aes(x = z, y = k)) +
  geom_line(stat = "function", fun = f_z, color = "blue") +  
  geom_point() + 
  labs(x = "z", y = "Step") + 
  theme_minimal()
```

###### 1.5 (5 points)

Redo the same analysis as **Question 1.4**, but this time using $\eta = 0.03$. What do you observe? What can you conclude from this analysis.

```{R}
f_z <- function(z_0){
  return_value = (z_0^4) - 6 *(z_0^2) - 3*(z_0) + 4
  return(return_value) 
}
eta <- 0.03
z <- torch_tensor(-3.5, requires_grad = TRUE)

steps <- 100
gradient_vector2 <- numeric(100)
# Perform gradient descent
#for (k in 1:steps) {
  #output <- f_z(z)
  
  #output <- output$backward()
  
  #gradient <- z$grad
  #gradient<- gradient$to(device = torch_device("cpu"))
  
  #z <- z - eta * gradient
  #gradient_vector2[k] <- z$item()
  #z$zero_grad()
#}
```

```{R}
df_grad2 <- data.frame(z = gradient_vector2, k = 1:steps)
ggplot(df_grad2, aes(x = z, y = k)) +
  geom_line(stat = "function", fun = f_z, color = "blue") +  
  geom_point() + 
  labs(x = "z", y = "Step") + 
  theme_minimal()
```

*The gradient's are relatively similary in how quickly they descend to zero, but eta = .03 would be slightly faster.*

<br><br><br><br> <br><br><br><br>

## Question 2

::: callout-tip
## 50 points

Logistic regression and interpretation of effect sizes
:::

For this question we will use the **Titanic** dataset from the Stanford data archive. This dataset contains information about passengers aboard the Titanic and whether or not they survived.

###### 2.1 (5 points)

Read the data from the following URL as a tibble in R. Preprocess the data such that the variables are of the right data type, e.g., binary variables are encoded as factors, and convert all column names to lower case for consistency. Let's also rename the response variable `Survival` to `y` for convenience.

```{R}
url <- "https://web.stanford.edu/class/archive/cs/cs109/cs109.1166/stuff/titanic.csv"

df <- read.csv(url)
df_tidy <- df %>% 
  mutate_if(is.logical, as.factor) %>%
  rename_all(tolower) %>%
  rename(y = survived)
```

###### 2.2 (5 points)

Visualize the correlation matrix of all numeric columns in `df` using `corrplot()`

```{R}
numeric_df <- df_tidy[sapply(df_tidy, is.numeric)]
numeric_df %>% 
  cor()%>%
  corrplot(method = "color")
```

###### 2.3 (10 points)

Fit a logistic regression model to predict the probability of surviving the titanic as a function of:

-   `pclass`
-   `sex`
-   `age`
-   `fare`
-   `# siblings`
-   `# parents`

```{R}
full_model <- glm(y ~ pclass + sex + age + fare + siblings.spouses.aboard + parents.children.aboard, data = df_tidy) # Insert your code here
summary(full_model)
```

###### 2.4 (30 points)

Provide an interpretation for the slope and intercept terms estimated in `full_model` in terms of the log-odds of survival in the titanic and in terms of the odds-ratio (if the covariate is also categorical).

::: callout-hint
## 

Recall the definition of logistic regression from the lecture notes, and also recall how we interpreted the slope in the linear regression model (particularly when the covariate was categorical).
:::

*Interpretations:*

*(Intercept) 1.3320583 : The estimated log-odds of survival(y) is 1.33 when all predictors are zero, but logistic regression only allows for values y in \[-1,1\]. Thus, this intercept may not be of value*

*Pclass -0.1800338: The estimated log-odds of survival decreased by .18 for each unit increase of class when all other covariates are held constant.* *sexmale -0.5077356: The estimated log-odds of survival decreased by .5 when a case was male and all other variables were held constant.*

*age -0.0061972: The estimated log-odds of survival decreased by .006 when age increased by one unit and all other variables were held constant.*

*fare 1.249: The estimated log-odds of survival increased by 1.2 when there was a one unit increase in fare and all other covariates were held constant.*

*Siblings and Spouses aboard -3.811: The estimated log-odds of survival decreased by 3.811 when there was a one unit increase in siblings aboard and all other covariates were held constant.*

*Parents with children aboard -1.067 : The estimated log-odds of survival decreased by 1.067 when there was a one unit increase in parents with children aboard and all other covariates were held constant.*

<br><br><br><br> <br><br><br><br>

## Question 3

::: callout-tip
## 70 points

Variable selection and logistic regression in `torch`
:::

###### 3.1 (15 points)

Complete the following function `overview` which takes in two categorical vectors (`predicted` and `expected`) and outputs:

-   The prediction accuracy
-   The prediction error
-   The false positive rate, and
-   The false negative rate

```{R}
overview <- function(predicted, expected){
    confusion_matrix <- table(predicted,expected)
    accuracy <- (confusion_matrix[1] + confusion_matrix[4]) / length(expected) * 100 # Insert your code here
    error <- 100 - accuracy # Insert your code here
    
    total_false_positives <- confusion_matrix[3] 
    total_true_positives <- confusion_matrix[4] 
    total_false_negatives <- confusion_matrix[2] 
    total_true_negatives <- confusion_matrix[1] 
    
    false_positive_rate <- total_false_positives / (total_false_positives + total_true_negatives)
    false_negative_rate <- total_false_negatives / (total_false_negatives + total_true_positives)
    return(
        data.frame(
            accuracy = accuracy, 
            error=error, 
            false_positive_rate = false_positive_rate, 
            false_negative_rate = false_negative_rate
        )
    )
}
```

You can check if your function is doing what it's supposed to do by evaluating

```{R}
overview(df_tidy$y, df_tidy$y)
```

and making sure that the accuracy is $100\%$ while the errors are $0\%$.

###### 3.2 (5 points)

display an overview of the key performance metrics of `full_model`

```{R}
residual <- predict(full_model, type = "response")
residual_adjusted <- ifelse(residual < 0.5, 0, 1)
overview(residual_adjusted, df_tidy$y)
```

###### 3.3 (5 points)

Using backward-stepwise logistic regression, find a parsimonious altenative to `full_model`, and print its `overview`

```{R}
step_model <- step(full_model, direction = "backward")
summary(step_model)
```

```{R}
step_predictions <- predict(step_model, type = "response")
step_predictions_adjusted <- ifelse(step_predictions < 0.5, 0, 1)
overview(step_predictions_adjusted, df_tidy$y)
```

###### 3.4 (15 points)

Using the `caret` package, setup a $5$-fold cross-validation training method using the `caret::trainConrol()` function

```{R}
controls <- trainControl(method = "cv", 5) 
```

Now, using `control`, perform $5$-fold cross validation using `caret::train()` to select the optimal $\lambda$ parameter for LASSO with logistic regression.

Take the search grid for $\lambda$ to be in $\{ 2^{-20}, 2^{-19.5}, 2^{-19}, \dots, 2^{-0.5}, 2^{0} \}$.

```{R}
library(glmnet)
df_filtered <- df_tidy %>%
  select(-which(sapply(df_tidy,is.character)))
# Insert your code in the ... region
lasso_fit <- train(
  x = df_filtered[, -which(names(df_tidy) == "y")],
  y = as.factor(df_tidy$y),
  method = "glmnet",
  trControl = controls,
  tuneGrid = expand.grid(
    alpha = 1,
    lambda = 2^seq(-20, 0, by = 0.5)
    ),
  family = "binomial"
)

plot(lasso_fit$results$lambda, lasso_fit$results$Accuracy, type = "l",
     xlab = "log2(lambda)", ylab = " CV acc",
     main = "CV Accuracy vs. log2(lambda)")

optimal_lambda <- lasso_fit$results$lambda[which.max(lasso_fit$results$Accuracy)]

cat("Lambda", optimal_lambda)
```

Using the information stored in `lasso_fit$results`, plot the results for cross-validation accuracy vs. $log_2(\lambda)$. Choose the optimal $\lambda^*$, and report your results for this value of $\lambda^*$.

###### 3.5 (25 points)

First, use the `model.matrix()` function to convert the covariates of `df` to a matrix format

```{R}
covariate_matrix <- model.matrix(full_model)[, -1]
```

Now, initialize the covariates $X$ and the response $y$ as `torch` tensors

```{R}
X <- torch_tensor(covariate_matrix, dtype = torch_float())
y <- torch_tensor(df_tidy$y, dtype = torch_float())
```

Using the `torch` library, initialize an `nn_module` which performs logistic regression for this dataset. (Remember that we have 6 different covariates)

```{R}
logistic <- nn_module(
  initialize = function() {
    self$f <- nn_linear(6, 1)
    self$g <- nn_sigmoid()
  },
  forward = function(x) {
    x %>% 
      self$f() %>% 
      self$g()
    
  }
)

f <- logistic()
```

You can verify that your code is right by checking that the output to the following code is a vector of probabilities:

```{R}
head(f(X))
```

Now, define the loss function `Loss()` which takes in two tensors `X` and `y` and a function `Fun`, and outputs the **Binary cross Entropy loss** between `Fun(X)` and `y`.

```{R}
Loss <- function(X, y, model){
   nn_bce_loss()(model(X), y)
}
f <- logistic()
Loss(X, y, f)
```

Initialize an optimizer using `optim_adam()` and perform $n=1000$ steps of gradient descent in order to fit logistic regression using `torch`.

```{R}
f <- logistic()
optimizer <- optim_adam(f$parameters, lr = .01) # Insert your code here

n <- 1000
for(k in 1: n){
  loss <- Loss(X,y, f)
  optimizer$zero_grad()
  loss$backward()
  optimizer$step()
  
  if (k %% 20 == 0) {
        cat(sprintf("Epoch: %d, Loss: %.4f\n", k, loss$item()))
    }
    
  
  
}
```

Using the final, optimized parameters of `f`, compute the compute the predicted results on `X`

```{R}
predicted_probabilities <- f(X) %>% as_array()
torch_predictions <- ifelse(predicted_probabilities <  0.5, 0, 1)

overview(torch_predictions, df_tidy$y)
```

###### 3.6 (5 points)

Create a summary table of the `overview()` summary statistics for each of the $4$ models we have looked at in this assignment, and comment on their relative strengths and drawbacks.

::: {.hidden unless-format="pdf"}
\pagebreak
:::

<br><br><br><br> <br><br><br><br>

::: {.callout-note collapse="true"}
## Session Information

Print your `R` session information using the following command

```{R}
sessionInfo()
```
:::
